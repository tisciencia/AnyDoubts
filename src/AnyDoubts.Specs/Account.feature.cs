// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace AnyDoubts.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Creating an account")]
    public partial class CreatingAnAccountFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Account.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Creating an account", "As an anonymous user\r\nI want to be able to create an account", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anonymous user can start creating an account")]
        public virtual void AnonymousUserCanStartCreatingAnAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anonymous user can start creating an account", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
 testRunner.Given("an anonymous user");
#line 12
 testRunner.When("she goes to /signup");
#line 13
 testRunner.Then("she should be at the \'users/new\' page");
#line 14
 testRunner.And("she should see a <form> containing a textfield: Username, textfield: Email, passw" +
                    "ord: Password, password: \'Confirm Password\', submit: \'Sign up\'");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anonymous user can create an account")]
        public virtual void AnonymousUserCanCreateAnAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anonymous user can create an account", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("an anonymous user");
#line 21
    testRunner.And("no user with login: \'firstuser\' exists");
#line 22
 testRunner.When("she registers an account as the preloaded \'firstuser\'");
#line 23
 testRunner.Then("she should be redirected to the home page");
#line 24
 testRunner.When("she follows that redirect!");
#line 25
 testRunner.Then("she should see a notice message \'Thanks for signing up!\'");
#line 26
    testRunner.And("a user with login: \'firstuser\' should exist");
#line 27
    testRunner.And("the user should have login: \'firstuser\', and email: \'firstuser@anydoubts.net\'");
#line 28
    testRunner.And("firstuser should be logged in");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anonymous user can not create an account with incomplete or incorrect input")]
        public virtual void AnonymousUserCanNotCreateAnAccountWithIncompleteOrIncorrectInput()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anonymous user can not create an account with incomplete or incorrect input", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("an anonymous user");
#line 35
    testRunner.And("no user with login: \'firstuser\' exists");
#line 36
 testRunner.When("she registers an account with login: \'\',     password: \'monkey\', password_confirm" +
                    "ation: \'monkey\' and email: \'firstuser@anydoubts.net\'");
#line 37
 testRunner.Then("she should be at the \'users/new\' page");
#line 38
    testRunner.And("she should     see an errorExplanation message \'Login can\'t be blank\'");
#line 39
    testRunner.And("no user with login: \'firstuser\' should exist");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anonymous user can not create an account with no password")]
        public virtual void AnonymousUserCanNotCreateAnAccountWithNoPassword()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anonymous user can not create an account with no password", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("an anonymous user");
#line 43
    testRunner.And("no user with login: \'firstuser\' exists");
#line 44
 testRunner.When("she registers an account with login: \'firstuser\', password: \'\',       password_co" +
                    "nfirmation: \'monkey\' and email: \'firstuser@anydoubts.net\'");
#line 45
 testRunner.Then("she should be at the \'users/new\' page");
#line 46
    testRunner.And("she should     see an errorExplanation message \'Password can\'t be blank\'");
#line 47
    testRunner.And("no user with login: \'firstuser\' should exist");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anonymous user can not create an account with no password_confirmation")]
        public virtual void AnonymousUserCanNotCreateAnAccountWithNoPassword_Confirmation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anonymous user can not create an account with no password_confirmation", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
 testRunner.Given("an anonymous user");
#line 51
    testRunner.And("no user with login: \'firstuser\' exists");
#line 52
 testRunner.When("she registers an account with login: \'firstuser\', password: \'monkey\', password_co" +
                    "nfirmation: \'\'       and email: \'firstuser@anydoubts.net\'");
#line 53
 testRunner.Then("she should be at the \'users/new\' page");
#line 54
    testRunner.And("she should     see an errorExplanation message \'Password confirmation can\'t be bl" +
                    "ank\'");
#line 55
    testRunner.And("no user with login: \'firstuser\' should exist");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anonymous user can not create an account with mismatched password & password_conf" +
            "irmation")]
        public virtual void AnonymousUserCanNotCreateAnAccountWithMismatchedPasswordPassword_Confirmation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anonymous user can not create an account with mismatched password & password_conf" +
                    "irmation", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("an anonymous user");
#line 59
    testRunner.And("no user with login: \'firstuser\' exists");
#line 60
 testRunner.When("she registers an account with login: \'firstuser\', password: \'monkey\', password_co" +
                    "nfirmation: \'monkeY\' and email: \'firstuser@anydoubts.net\'");
#line 61
 testRunner.Then("she should be at the \'users/new\' page");
#line 62
    testRunner.And("she should     see an errorExplanation message \'Password doesn\'t match confirmati" +
                    "on\'");
#line 63
    testRunner.And("no user with login: \'firstuser\' should exist");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anonymous user can not create an account with bad email")]
        public virtual void AnonymousUserCanNotCreateAnAccountWithBadEmail()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anonymous user can not create an account with bad email", ((string[])(null)));
#line 65
this.ScenarioSetup(scenarioInfo);
#line 66
 testRunner.Given("an anonymous user");
#line 67
    testRunner.And("no user with login: \'firstuser\' exists");
#line 68
 testRunner.When("she registers an account with login: \'firstuser\', password: \'monkey\', password_co" +
                    "nfirmation: \'monkey\' and email: \'\'");
#line 69
 testRunner.Then("she should be at the \'users/new\' page");
#line 70
    testRunner.And("she should     see an errorExplanation message \'Email can\'t be blank\'");
#line 71
    testRunner.And("no user with login: \'firstuser\' should exist");
#line 72
 testRunner.When("she registers an account with login: \'firstuser\', password: \'monkey\', password_co" +
                    "nfirmation: \'monkey\' and email: \'firstuser@anydoubts.net\'");
#line 73
 testRunner.Then("she should be redirected to the home page");
#line 74
 testRunner.When("she follows that redirect!");
#line 75
 testRunner.Then("she should see a notice message \'Thanks for signing up!\'");
#line 76
    testRunner.And("a user with login: \'firstuser\' should exist");
#line 77
    testRunner.And("the user should have login: \'firstuser\', and email: \'firstuser@anydoubts.net\'");
#line 78
    testRunner.And("firstuser should be logged in");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Anonymous user can not create an account replacing an activated account")]
        public virtual void AnonymousUserCanNotCreateAnAccountReplacingAnActivatedAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Anonymous user can not create an account replacing an activated account", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("an anonymous user");
#line 85
    testRunner.And("an activated user named \'Charlie\'");
#line 86
    testRunner.And("we try hard to remember the user\'s updated_at, and created_at");
#line 87
 testRunner.When("she registers an account with login: \'charlie\', password: \'monkey\', and email: \'c" +
                    "harlie@example.com\'");
#line 88
 testRunner.Then("she should be at the \'users/new\' page");
#line 89
    testRunner.And("she should     see an errorExplanation message \'Login has already been taken\'");
#line 90
    testRunner.And("she should not see an errorExplanation message \'Email has already been taken\'");
#line 91
    testRunner.And("a user with login: \'charlie\' should exist");
#line 92
    testRunner.And("the user should have email: \'registered@example.com\'");
#line 93
    testRunner.And("the user\'s created_at should stay the same under to_s");
#line 94
    testRunner.And("the user\'s updated_at should stay the same under to_s");
#line 95
    testRunner.And("she should not be logged in");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
